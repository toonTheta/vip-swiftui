//
//  HealthDetailInteractor.swift
//  CleanSwiftUI
//
//  Created by Siradanai.s on 2/7/2566 BE.
//  Copyright (c) 2023. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol HealthDetailBusinessLogic {
    func fetchDetail(request: HealthDetail.FetchDetail.Request)
    func submitRecord(request: HealthDetail.SubmitRecord.Request)
    func removeDetail(request: HealthDetail.RemoveDetail.Request)
    
}

protocol HealthDetailDataStore {
    var recordType: HealthRecordType! { get }
    
    func record(for id: UUID) -> HealthRecord
}

final class HealthDetailInteractor: HealthDetailBusinessLogic, HealthDetailDataStore {
    var presenter: HealthDetailPresentationLogic
    private var worker: HealthDetailWorkerProtocol
    
    private(set) var recordType: HealthRecordType!
    private let healthService: HealthServiceProtocol
    
    private var records: [HealthRecord] = []

    init(
        worker: HealthDetailWorkerProtocol = HealthDetailWorker(),
        presenter: HealthDetailPresentationLogic,
        recordType: HealthRecordType,
        healthService: HealthServiceProtocol
    ) {
        self.worker = worker
        self.presenter = presenter
        self.recordType = recordType
        self.healthService = healthService
    }
    
    func record(for id: UUID) -> HealthRecord {
        return records
            .first(where: { $0.id == id })!
    }
    
    func fetchDetail(request: HealthDetail.FetchDetail.Request) {
        refreshDetail()
    }
    
    func submitRecord(request: HealthDetail.SubmitRecord.Request) {
        switch request.mode {
        case let .adding(recordType):
            healthService.createHealthRecord(
                id: UUID(),
                value: request.value,
                createdDate: request.date,
                type: recordType
            )
            
        case let .editing(record):
            healthService.updateHealthRecord(
                record: record,
                value: request.value,
                createdDate: request.date,
                type: recordType
            )
        }
        
        refreshDetail()
    }
    
    func removeDetail(request: HealthDetail.RemoveDetail.Request) {
        healthService.deleteHealthRecord(record: request.record)
        
        refreshDetail()
    }
    
    func refreshDetail() {
        let result = healthService.fetchHealthRecords(of: recordType)
        
        switch result {
        case let .success(records):
            self.records = records.sorted(by: { $0.createdDate! < $1.createdDate! })
            
            presenter.presentDetail(response: .init(
                recordType: recordType,
                records: self.records
            ))
        case .failure(_):
            // TODO: Handle error
            break
        }
    }
}

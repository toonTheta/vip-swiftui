//
//  HealthDetailViewController.swift
//  CleanSwiftUI
//
//  Created by Siradanai.s on 2/7/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI

protocol HealthDetailDisplayLogic: AnyObject {}

final class HealthDetailViewController: UIViewController, HealthDetailDisplayLogic {
    var interactor: HealthDetailBusinessLogic?
    var router: (HealthDetailRoutingLogic & HealthDetailDataPassing)?

    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.title = "Detail"
        loadSwiftUIView(HealthDetailScreenSwiftUIView(interactor: interactor, viewModel: .init(records: [])))
    }
}

private extension HealthDetailViewController {
    func setupVIP() {
        let viewController = self

        let presenter = HealthDetailPresenter(
            viewController: viewController
        )

        let interactor = HealthDetailInteractor(
            presenter: presenter
        )

        let router = HealthDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func loadSwiftUIView(_ swiftUIView: some View) {
        let hostingController = UIHostingController(rootView: swiftUIView)
        
        addChild(hostingController)
        view.addSubview(hostingController.view)
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        hostingController.didMove(toParent: self)
    }
}

struct HealthDetailScreenSwiftUIView: View {
    var interactor: HealthDetailBusinessLogic?
    @ObservedObject var viewModel: HealthDetailSceneViewModel

    var body: some View {
        Text("Record")
    }
}

struct HealthDetailScreenSwiftUIView_Previews: PreviewProvider {
    static var previews: some View {
        HealthDetailScreenSwiftUIView(
            interactor: nil,
            viewModel: .init(records: [])
        )
    }
}

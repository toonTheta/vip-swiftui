//
//  HealthInputFormViewController.swift
//  VIPSwiftUI
//
//  Created by Siradanai.s on 7/7/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI

protocol HealthInputFormViewControllerDelegate: AnyObject {
    func didSubmitHealthInputData(withValue value: Double)
}

protocol HealthInputFormDisplayLogic: AnyObject {
    func displayProceedTextInput(viewModel: HealthInputForm.ProceedTextInput.ViewModel)
}

final class HealthInputFormViewController: BaseUIViewController, HealthInputFormDisplayLogic {
    var interactor: HealthInputFormBusinessLogic?
    var router: (HealthInputFormRoutingLogic & HealthInputFormDataPassing)?
    var addButton: UIBarButtonItem!
    
    private let sceneViewModel = HealthInputFormSceneViewModel(
        date: "",
        time: (hour: 10, minute: 23),
        value: 0,
        unitLabel: ""
    )
    
    let textInputController = TextInputController()
    
    weak var delegate: HealthInputFormViewControllerDelegate?
    
    init(delegate: HealthInputFormViewControllerDelegate?) {
        super.init(nibName: nil, bundle: nil)
        self.delegate = delegate
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupVIP()
        setupBarButton()
        
        loadSwiftUIView(HealthInputFormView(
            viewController: self,
            viewModel: sceneViewModel
        ))
    }
    
    func displayProceedTextInput(viewModel: HealthInputForm.ProceedTextInput.ViewModel) {
        setAddButtonEnabled(viewModel.addButtonEnabled)
    }
}

private extension HealthInputFormViewController {
    func setupVIP() {
        let viewController = self
        
        let presenter = HealthInputFormPresenter(
            viewController: viewController
        )
        
        let interactor = HealthInputFormInteractor(
            presenter: presenter
        )
        
        let router = HealthInputFormRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func setupBarButton() {
        addButton = UIBarButtonItem(
            title: "Add",
            style: .plain,
            target: self,
            action: #selector(handleTapAddData)
        )
        
        navigationItem.rightBarButtonItem = addButton
    }
    
    @objc func handleTapAddData() {
        guard let doubleValue = Double(textInputController.text) else { return }
        
        delegate?.didSubmitHealthInputData(withValue: doubleValue)
    }
    
    func setAddButtonEnabled(_ enabled: Bool) {
        addButton.isEnabled = enabled
    }
}

struct HealthInputFormView: View {
    var viewController: HealthInputFormViewController?
    @ObservedObject var viewModel: HealthInputFormSceneViewModel
    
    var body: some View {
        List {
            HStack {
                Text("Date")
                Spacer()
                Text("\(viewModel.date)")
            }
            
            HStack {
                Text("Time")
                Spacer()
                Text("\(viewModel.date)")
            }
            
            HStack {
                Text(viewModel.unitLabel)
                Spacer()
                TextInput(controller:viewController?.textInputController)
                    .onTextChange { text in
                        viewController?.interactor?.proceedTextInput(
                            request: .init(text: text)
                        )
                    }
                    .frame(maxWidth: 80)
                    .keyboardType(.decimalPad)
            }
        }
    }
}


struct HealthInputFormView_Previews: PreviewProvider {
    static var previews: some View {
        HealthInputFormView(viewModel: sceneViewModel)
    }
}

fileprivate let sceneViewModel = HealthInputFormSceneViewModel(
    date: Date().toString(),
    time: (hour: 14, minute: 23),
    value: 84,
    unitLabel: "kg"
)





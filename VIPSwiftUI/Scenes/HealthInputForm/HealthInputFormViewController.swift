//
//  HealthInputFormViewController.swift
//  VIPSwiftUI
//
//  Created by Siradanai.s on 7/7/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftUI

protocol HealthInputFormViewControllerDelegate: AnyObject {
    func didSubmitHealthInputData(withValue value: Double, date: Date, mode: HealthInputForm.SceneOption)
    func didPressDelete(record: HealthRecord)
}

protocol HealthInputFormDisplayLogic: AnyObject {
    func displayProceedTextInput(viewModel: HealthInputForm.ProceedTextInput.ViewModel)
    func displayPreparedData(viewModel: HealthInputForm.PrepareData.ViewModel)
}

final class HealthInputFormViewController: BaseUIViewController, HealthInputFormDisplayLogic {
    var interactor: HealthInputFormBusinessLogic?
    var router: (HealthInputFormRoutingLogic & HealthInputFormDataPassing)?
    
    private let sceneViewModel = HealthInputFormSceneViewModel(
        dateTitle: "",
        timeTitle: "",
        unitTitle: "",
        saveButtonDisabled: true,
        deleteButtonTitle: .hidden
    )
    
    private(set) var dateInputController = DateInputController()
    private(set) var timeInputController = DateInputController()
    let textInputController = TextInputController()
    
    weak var delegate: HealthInputFormViewControllerDelegate?
    
    init(
        delegate: HealthInputFormViewControllerDelegate?,
        sceneOption: HealthInputForm.SceneOption
    ) {
        super.init(nibName: nil, bundle: nil)
        self.delegate = delegate
        setupVIP(sceneOption: sceneOption)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        loadSwiftUIView(HealthInputFormView(
            viewController: self,
            viewModel: sceneViewModel
        ))
        
        interactor?.prepareData(request: .init())
    }
    
    func displayPreparedData(viewModel: HealthInputForm.PrepareData.ViewModel) {
        sceneViewModel.dateTitle = viewModel.dateTitle
        sceneViewModel.timeTitle = viewModel.timeTitle
        sceneViewModel.unitTitle = viewModel.unitTitle
        
        dateInputController.updateDate(viewModel.dateValue)
        timeInputController.updateDate(viewModel.dateValue)
        textInputController.updateText(viewModel.textValue)
    }
    
    func displayProceedTextInput(viewModel: HealthInputForm.ProceedTextInput.ViewModel) {
        sceneViewModel.saveButtonDisabled = viewModel.saveButtonDisabled
    }
}

private extension HealthInputFormViewController {
    func setupVIP(sceneOption: HealthInputForm.SceneOption) {
        let viewController = self
        
        let presenter = HealthInputFormPresenter(
            viewController: viewController
        )
        
        let interactor = HealthInputFormInteractor(
            presenter: presenter,
            sceneOption: sceneOption
        )
        
        let router = HealthInputFormRouter()
        viewController.interactor = interactor
        viewController.router = router
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    func handleTapAddData() {
        guard
            let date = interactor?.inputDate,
            let text = interactor?.inputText,
            let doubleValue = Double(text),
            let sceneOption = interactor?.sceneOption
        else { return }
        
        delegate?.didSubmitHealthInputData(
            withValue: doubleValue,
            date: date,
            mode: sceneOption
        )
        
        dismiss(animated: true)
    }
    
    func handleTapDeleteData() {
        guard
            let record = interactor?.record
        else { return }
        
        delegate?.didPressDelete(record: record)
        dismiss(animated: true)
    }
}

struct HealthInputFormView: View {
    weak var viewController: HealthInputFormViewController?
    @ObservedObject var viewModel: HealthInputFormSceneViewModel
    @State private var birthDate = Date.now
    
    var body: some View {
        Form {
            DateInput(
                controller: viewController?.dateInputController,
                label: {
                    Text(viewModel.dateTitle)
                }
            ).onChange { [weak viewController] date in
                viewController?
                    .interactor?
                    .proceedDateInput(request: .init(date: date))
            }
            
            
            DateInput(
                controller: viewController?.timeInputController,
                displayedComponents: [.hourAndMinute]
            ) {
                Text(viewModel.timeTitle)
            }.onChange { [weak viewController] date in
                viewController?
                    .interactor?
                    .proceedDateInput(request: .init(date: date))
            }
            
            HStack {
                Text(viewModel.unitTitle)
                Spacer()
                TextInput(
                    placeholder: "value",
                    controller:viewController?.textInputController
                )
                .onTextChange { [weak viewController] text in
                    viewController?
                        .interactor?
                        .proceedTextInput(
                            request: .init(text: text)
                        )
                }
                .multilineTextAlignment(.trailing)
                .frame(maxWidth: 80)
                .keyboardType(.decimalPad)
            }
            
            Section {
                Button("Save") { [weak viewController] in
                    viewController?.handleTapAddData()
                }
                .disabled(viewModel.saveButtonDisabled)
                .frame(maxWidth: .infinity) // center the button
            }
            
            Section {
                viewModel.deleteButtonTitle.when(visible: { title in
                    Button(title, role: .destructive) { [weak viewController] in
                        viewController?.handleTapAddData()
                    }
                    .frame(maxWidth: .infinity) // center the button
                })
            }
        }
    }
}


struct HealthInputFormView_Previews: PreviewProvider {
    static var previews: some View {
        HealthInputFormView(viewModel: sceneViewModel)
    }
}

fileprivate let sceneViewModel = HealthInputFormSceneViewModel(
    dateTitle: "Date Ja",
    timeTitle: "Time Ja",
    unitTitle: "KG",
    saveButtonDisabled: true,
    deleteButtonTitle: .visible("Delete Ja")
)





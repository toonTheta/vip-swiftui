//
//  HealthInputFormInteractor.swift
//  VIPSwiftUI
//
//  Created by Siradanai.s on 7/7/2566 BE.
//  Copyright (c) 2023. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol HealthInputFormBusinessLogic {
    var inputText: String? { get }
    var inputDate: Date? { get }
    var record: HealthRecord? { get }
    var sceneOption: HealthInputForm.SceneOption { get }
    
    func prepareData(request: HealthInputForm.PrepareData.Request)
    func proceedTextInput(request: HealthInputForm.ProceedTextInput.Request)
    func proceedDateInput(request: HealthInputForm.ProceedDateInput.Request)
}

protocol HealthInputFormDataStore {}

final class HealthInputFormInteractor: HealthInputFormBusinessLogic, HealthInputFormDataStore {
    var presenter: HealthInputFormPresentationLogic
    private var worker: HealthInputFormWorkerProtocol
    
    private(set) var sceneOption: HealthInputForm.SceneOption
    
    private(set) var inputText: String?
    private(set) var inputDate: Date?
    
    var record: HealthRecord? {
        if case let .editing(record) = sceneOption {
            return record
        } else { return nil }
    }

    init(
        worker: HealthInputFormWorkerProtocol = HealthInputFormWorker(),
        presenter: HealthInputFormPresentationLogic,
        sceneOption: HealthInputForm.SceneOption
    ) {
        self.worker = worker
        self.presenter = presenter
        self.sceneOption = sceneOption
    }
    
    func prepareData(request: HealthInputForm.PrepareData.Request) {
        switch sceneOption {
        case let .adding(recordType):
            inputDate = Date()
            inputText = ""
            
            presenter.presentPreparedData(response: .init(
                date: inputDate ?? Date(),
                value: nil,
                recordType: recordType,
                submitButtonEnabled: shouldButtonEnabled(),
                deleteButtonEnabled: false
            ))
            
        case let .editing(record):
            guard
                let createdDate = record.createdDate,
                let recordTypeString = record.type,
                let recordType = HealthRecordType(rawValue: recordTypeString)
            else { return }
            
            inputDate = createdDate
            inputText = "\(record.value)"
            
            presenter.presentPreparedData(response: .init(
                date: inputDate ?? Date(),
                value: record.value,
                recordType: recordType,
                submitButtonEnabled: shouldButtonEnabled(),
                deleteButtonEnabled: true
            ))
        }
    }
    
    func proceedTextInput(request: HealthInputForm.ProceedTextInput.Request) {
        inputText = request.text
        let buttonDisabled = !shouldButtonEnabled()
        presenter.presentProceedTextInput(response: .init(submitButtonDisabled: buttonDisabled))
    }
    
    func proceedDateInput(request: HealthInputForm.ProceedDateInput.Request) {
        inputDate = request.date
    }
    
    func shouldButtonEnabled() -> Bool {
        return inputText?.isEmpty == false && inputDate != nil
    }
}

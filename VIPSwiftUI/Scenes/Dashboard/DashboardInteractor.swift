//
//  CounterInteractor.swift
//  CleanSwiftUI
//
//  Created by Siradanai.s on 30/6/2566 BE.
//  Copyright (c) 2566 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol DashboardBusinessLogic {
    func fetchCateogory(request: Dashboard.FetchCategory.Request)
    func tapCategory(request: Dashboard.TapCategory.Request)
}

class DashboardInteractor: DashboardBusinessLogic {    
    var presenter: DashboardPresenter?
    
    private let healthService: HealthServiceProtocol
    private let recordTypes: [HealthRecordType] =  [.height, .weight, .bodyFatPercentage, .bodyMassIndex]

    init(
        presenter: DashboardPresenter,
        healthService: HealthServiceProtocol
    ) {
        self.presenter = presenter
        self.healthService = healthService
    }
    
    func fetchCateogory(request: Dashboard.FetchCategory.Request) {
        let lastRecords: [CategoryResponse] = recordTypes.map { type in
            let result = healthService.fetchLastRecord(of: type)
            switch result {
            case let .success(record):
                return .init(
                    value: String(format: "%.1f", record.value),
                    lastUpdate: record.createdDate!,
                    type: type
                )
            case .failure:
                return .init(
                    value: nil,
                    lastUpdate: nil,
                    type: type
                )
            }
        }
        
        presenter?.presentCategory(response: .init(
            recentCategoryResponse: lastRecords
        ))
    }
    
    func tapCategory(request: Dashboard.TapCategory.Request) {
        presenter?.presentTapCategory(response: .init(categoryType: request.categoryType))
    }
}
